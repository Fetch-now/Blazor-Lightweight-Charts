@using Blazor_Lightweight_Charts.Model;
@using Blazor_Lightweight_Charts.Model.Parameters;
@using Blazor_Lightweight_Charts.Model.Series;
@using Blazor_Lightweight_Charts.Model.Parameters.ChartParameters;
@inject LightweighChartsInterop Interop;

<div @ref="ChartReference" class="lightweight-chart">
    <CascadingValue Value="@this">
        @ChildContent
    </CascadingValue>
</div>

@code {
    protected ElementReference ChartReference;
    protected ChartApi Chart { get; set; } = null!;

    [Parameter]
    public RenderFragment ChildContent { get; set; }
    public bool IsInitialized { get; set; } = false;

    public async void AddLineSeries(IEnumerable<LineSeriesItem> items)
    {
        if(Chart == null)
        {
            throw new ArgumentNullException();
        }
        await Chart.AddLineSeries(items.ToArray());
    }

    public async void AddAreaSeries(IEnumerable<AreaSeriesItem> items)
    {
        if (Chart == null)
        {
            throw new ArgumentNullException();
        }
        await Chart.AddAreaSeries(items.ToArray());
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            ChartOptions options = new ChartOptions()
                {
                    Width = 400,
                    Height = 400
                };
            Chart = await Interop.CreateChart(ChartReference, options);
            IsInitialized = true;
        }
    }
}